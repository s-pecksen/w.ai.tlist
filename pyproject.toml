[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "waitlist-management"
version = "2.0.0"
description = "A comprehensive waitlist management system for healthcare providers"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Waitlist Management Team" },
]
keywords = [
    "waitlist",
    "healthcare",
    "appointment",
    "scheduling",
    "fastapi",
    "supabase",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.6",
    "psycopg2-binary==2.9.9",
    "asyncpg==0.29.0",
    "sqlalchemy[asyncio]==2.0.39",
    "alembic==1.13.1",
    "python-dotenv==1.0.1",
    "pydantic==2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/waitlist-management"
Documentation = "https://github.com/yourusername/waitlist-management#readme"
Repository = "https://github.com/yourusername/waitlist-management.git"
"Bug Reports" = "https://github.com/yourusername/waitlist-management/issues"

[project.scripts]
waitlist-server = "main:main"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "psycopg2.*",
    "asyncpg.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src", "main.py"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"alembic/*" = ["F401", "F403"] 